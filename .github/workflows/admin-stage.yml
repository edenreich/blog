name: admin-stage

on:
  push:
    branches:
      - develop
    paths:
      - ".github/workflows/admin-stage.yml"
      - "src/admin/**"
      - "ops/docker/admin/**"
      - "ops/kubernetes/deployments/admin/**"

env:
  DOCKER_IMAGE_NAME: stage-blog-admin
  DOCKER_REPO: edenr/stage-blog-admin
  DEPLOYMENT_NAME: blog-admin
  DEPLOYMENT_VERSION: ${{ github.run_number }}
  SERVERS: k8s-master k8s-node1 k8s-node2 k8s-node3
  ARTIFACT_FILES: src/admin/package.json ops/docker/admin/artifacts/Dockerfile

jobs:
  check:
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 2
      - name: Check if relevant artifact files have been changed
        id: check_files
        run: |
          for file in $(echo ${{ env.ARTIFACT_FILES }} | xargs); do
            if [ $(git diff --name-only HEAD^ HEAD | grep $file) ]; then 
              echo "::set-output name=run_job::true"
              break
            else
              echo "::set-output name=run_job::false"
            fi
          done
  build-artifacts:
    runs-on: self-hosted
    needs: check
    steps:
      - uses: actions/checkout@master
      - name: Build Artifacts
        if: ${{ needs.check.outputs.run_job == 'true' }}
        run: |
          DOCKER_BUILDKIT=1 docker build \
            --target admin-artifacts \
            -t admin-artifacts:latest \
            -f ops/docker/admin/artifacts/Dockerfile .
  build:
    runs-on: self-hosted
    needs: build-artifacts
    steps:
      - uses: actions/checkout@master
      - name: Docker Build
        run: |
          DOCKER_BUILDKIT=1 docker build \
            --target stage \
            -t ${{ env.DOCKER_REPO }}:${{ env.DEPLOYMENT_VERSION }} \
            -t ${{ env.DOCKER_REPO }}:latest \
            -f ops/docker/admin/Dockerfile .
  push:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Docker Login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p '${{ secrets.DOCKER_PASSWORD }}'
      - name: Docker Push
        run: |
          docker push ${{ env.DOCKER_REPO }}:${{ env.DEPLOYMENT_VERSION }}
          docker push ${{ env.DOCKER_REPO }}:latest
  deploy:
    runs-on: self-hosted
    needs: push
    steps:
      - uses: actions/checkout@master
      - name: Deploy to Kubernetes
        run: |
          kubectl config use-context stage
          kubectl apply -f ops/kubernetes/deployments/admin/
          kubectl patch deployment ${{ env.DEPLOYMENT_NAME }} -p '{"spec":{"template":{"spec":{"containers":[{"name":"${{ env.DEPLOYMENT_NAME }}","image":"${{ env.DOCKER_REPO }}:${{ env.DEPLOYMENT_VERSION }}"}]}}}}'
  cleanup:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Remove all related images from github-runner
        run: |
          docker rmi -f $(docker images | grep ${{ env.DOCKER_REPO }} | awk '{ printf "%s\t", $3 }' | xargs) || true
          docker system prune -f
      - name: Keep 5 Releases
        run: for server in $(echo ${{ env.SERVERS }} | xargs); do ssh $server ./scripts/cleanup.sh ${{ env.DOCKER_REPO }}; done
      - name: Remove Dangling Docker Images
        run: docker system prune -f
