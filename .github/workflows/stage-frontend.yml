name: stage-frontend

on:
  push:
    branches:
      - develop
    paths:
      - ".github/workflows/stage-frontend.yml"
      - "src/frontend/**"
      - "ops/docker/frontend/**"
      - "ops/kubernetes/deployments/frontend/**"

env:
  DOCKER_BUILDKIT: 1
  DOCKER_REPO: edenr/stage-blog-frontend
  DEPLOYMENT_NAME: blog-frontend
  DEPLOYMENT_VERSION: ${{ github.run_number }}
  SERVERS: k8s-master k8s-node1 k8s-node2 k8s-node3 k8s-node4 k8s-node5 k8s-node6
  ARTIFACT_FILES: src/frontend/package.json ops/docker/frontend/artifacts/Dockerfile

jobs:
  check:
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@master
        with:
          fetch-depth: 2
      - name: Check if relevant artifact files have been changed
        id: check_files
        run: |
          for file in $(echo ${{ env.ARTIFACT_FILES }} | xargs); do
            if [ $(git diff --name-only HEAD^ HEAD | grep $file) ]; then 
              echo "::set-output name=run_job::true"
              break
            else
              echo "::set-output name=run_job::false"
            fi
          done
  build-artifacts:
    runs-on: self-hosted
    needs: check
    steps:
      - uses: actions/checkout@master
      - name: Build Artifacts
        if: ${{ needs.check.outputs.run_job == 'true' }}
        run: |
          docker build \
            -t frontend-artifacts:latest \
            -f ops/docker/frontend/artifacts/Dockerfile .
  build:
    runs-on: self-hosted
    needs: build-artifacts
    steps:
      - uses: actions/checkout@master
      - name: Docker Build
        run: |
          docker build \
            --target stage \
            --cache-from ${{ env.DOCKER_REPO }}:latest \
            -t ${{ env.DOCKER_REPO }}:latest \
            -f ops/docker/frontend/Dockerfile .
      - name: Docker Tag Image
        run: |
          docker tag ${{ env.DOCKER_REPO }}:latest ${{ env.DOCKER_REPO }}:${{ env.DEPLOYMENT_VERSION }}
  push:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Docker Login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p '${{ secrets.DOCKER_PASSWORD }}'
      - name: Docker Push
        run: |
          docker push ${{ env.DOCKER_REPO }}:${{ env.DEPLOYMENT_VERSION }}
          docker push ${{ env.DOCKER_REPO }}:latest
  deploy:
    runs-on: self-hosted
    needs: push
    steps:
      - uses: actions/checkout@master
      - name: Kubernetes - create a new deployment
        run: |
          kubectl config use-context stage
          cat ops/kubernetes/frontend/deployment.yaml | sed "s/{{VERSION}}/${{ env.DEPLOYMENT_VERSION }}/g" | kubectl apply -f -
      - name: Kubernetes - wait for new deployment to be successfully rolled out
        run: |
          while [ true ]; do
            if [ kubectl rollout status deploy/${{ env.DEPLOYMENT_NAME }}-${{ env.DEPLOYMENT_VERSION }} | grep 'successfully rolled out' ]; then
              break
            fi
            sleep 1
          done
      - name: Kubernetes - apply horizontal pods autoscaling to new deployment
        run: |
          cat ops/kubernetes/frontend/hpa.yaml | sed "s/{{VERSION}}/${{ env.DEPLOYMENT_VERSION }}/g" | kubectl apply -f -
      - name: Kubernetes - switch LB to green deployment
          cat ops/kubernetes/frontend/service.yaml | sed "s/{{VERSION}}/${{ env.DEPLOYMENT_VERSION }}/g" | kubectl apply -f -
  cleanup:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Remove all related images from github-runner
        run: docker rmi -f $(docker images | grep ${{ env.DOCKER_REPO }} | grep -v latest | awk '{image = sprintf("%s:%s", $1,$2)} END {print image}' | xargs) || true
      - name: Remove Dangling Docker Images
        run: docker system prune -f
      - name: Keep 5 Releases
        run: for server in $(echo ${{ env.SERVERS }} | xargs); do ssh $server ./scripts/cleanup.sh; done
