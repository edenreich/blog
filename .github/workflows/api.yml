name: API

on:
  push:
    branches:
      - develop
    paths:
      - ".github/workflows/api.yml"
      - "src/backend/api/**"
      - "ops/docker/backend/api/**"
      - "ops/kubernetes/backend/api/**"

env:
  DOCKER_BUILDKIT: 1
  DOCKER_REPO: edenr/blog-api 
  DOCKER_REPO_DEV: edenr/blog-api-devtools
  STAGE_SERVERS: k8s-master k8s-node1 k8s-node2 k8s-node3 k8s-node4 k8s-node6
  DEPLOYMENT_NAME: api
  DEPLOYMENT_VERSION: $(echo ${{ github.sha }} | cut -c1-8)

jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@master
      - name: Docker build container image
        run: |
          docker build \
            --target production \
            --cache-from ${{ env.DOCKER_REPO }}:latest \
            -t ${{ env.DOCKER_REPO }}:latest \
            -f ops/docker/backend/api/Dockerfile .
      - name: Docker build test container image
        run: |
          docker build \
            --target src-with-devtools \
            --cache-from ${{ env.DOCKER_REPO_DEV }}:latest \
            -t ${{ env.DOCKER_REPO_DEV }}:latest \
            -f ops/docker/backend/api/Dockerfile .
      - name: Docker Tag Images
        run: |
          docker tag ${{ env.DOCKER_REPO }}:latest ${{ env.DOCKER_REPO }}:${{ env.DEPLOYMENT_VERSION }}
          docker tag ${{ env.DOCKER_REPO_DEV }}:latest ${{ env.DOCKER_REPO_DEV }}:${{ env.DEPLOYMENT_VERSION }}
  push:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Docker Login
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p '${{ secrets.DOCKER_PASSWORD }}'
      - name: Docker Push
        run: |
          docker push ${{ env.DOCKER_REPO }}:${{ env.DEPLOYMENT_VERSION }}
          docker push ${{ env.DOCKER_REPO_DEV }}:${{ env.DEPLOYMENT_VERSION }}
          docker push ${{ env.DOCKER_REPO }}:latest
          docker push ${{ env.DOCKER_REPO_DEV }}:latest
  lint:
    runs-on: self-hosted
    needs: push
    steps:
      - name: Run linter
        run: |
          VERSION=${{ env.DEPLOYMENT_VERSION }} REPOSITORY=${{ env.DOCKER_REPO_DEV }} envsubst < ops/kubernetes/backend/api/jobs/linting.yaml | kubectl apply -f -
          ./ops/kubernetes/utils/wait_for_job.sh api-linting-${{ env.DEPLOYMENT_VERSION }}
  analyse:
    runs-on: self-hosted
    needs: push
    steps:
      - name: Run static analysis
        run: |
          VERSION=${{ env.DEPLOYMENT_VERSION }} REPOSITORY=${{ env.DOCKER_REPO_DEV }} envsubst < ops/kubernetes/backend/api/jobs/analyse.yaml | kubectl apply -f -
          ./ops/kubernetes/utils/wait_for_job.sh api-code-analysis-${{ env.DEPLOYMENT_VERSION }}
  test:
    runs-on: self-hosted
    needs: push
    steps:
      - name: Run database migrations
        run: |
          VERSION=${{ env.DEPLOYMENT_VERSION }} REPOSITORY=${{ env.DOCKER_REPO_DEV }} envsubst < ops/kubernetes/backend/api/jobs/tests/migrations.yaml | kubectl apply -f -
          ./ops/kubernetes/utils/wait_for_job.sh api-test-database-migration-${{ env.DEPLOYMENT_VERSION }}
      - name: Load fixture database seeds
        run: |
          VERSION=${{ env.DEPLOYMENT_VERSION }} REPOSITORY=${{ env.DOCKER_REPO_DEV }} envsubst < ops/kubernetes/backend/api/jobs/tests/seed.yaml | kubectl apply -f -
          ./ops/kubernetes/utils/wait_for_job.sh api-test-database-seed-${{ env.DEPLOYMENT_VERSION }}
      - name: Run integration tests
        run: |
          VERSION=${{ env.DEPLOYMENT_VERSION }} REPOSITORY=${{ env.DOCKER_REPO_DEV }} envsubst < ops/kubernetes/backend/api/jobs/tests/run.yaml | kubectl apply -f -
          ./ops/kubernetes/utils/wait_for_job.sh api-integration-tests-${{ env.DEPLOYMENT_VERSION }}
  migrations:
    runs-on: self-hosted
    needs: [lint, analyse, test]
    steps:
      - name: Run database migrations
        run: |
          VERSION=${{ env.DEPLOYMENT_VERSION }} REPOSITORY=${{ env.DOCKER_REPO }} envsubst < ops/kubernetes/backend/api/jobs/migrations.yaml | kubectl apply -f -
          ./ops/kubernetes/utils/wait_for_job.sh api-database-migration-${{ env.DEPLOYMENT_VERSION }}
  deploy:
    runs-on: self-hosted
    needs: migrations
    steps:
      - uses: actions/checkout@master
      - name: Kubernetes - switch to stage context
        run: kubectl config use-context stage
      - name: Kubernetes - create a new deployment
        run: |
          VERSION=${{ env.DEPLOYMENT_VERSION }} REPOSITORY=${{ env.DOCKER_REPO }} envsubst < ops/kubernetes/backend/api/deployment.yaml | kubectl apply -f -
      - name: Kubernetes - wait for new deployment to be successfully rolled out
        run: |
          max_count=180
          count=0
          while [ true ]; do
            if [[ $count -gt $max_count ]]; then
              echo "===> Waited for too long for a successful rolled out green version, but something went wrong. Aborting..."
              exit 1
            fi
            if [[ $(kubectl rollout status deploy/${{ env.DEPLOYMENT_NAME }}-${{ env.DEPLOYMENT_VERSION }} | grep 'successfully rolled out') ]]; then
              break
            fi
            count=$((count+1))
            echo "===> New deployment ${{ env.DEPLOYMENT_NAME }}-${{ env.DEPLOYMENT_VERSION }} is being rollout out..."
            sleep 1
          done
      - name: Kubernetes - apply horizontal pods autoscaling to new deployment
        run: |
          VERSION=${{ env.DEPLOYMENT_VERSION }} envsubst < ops/kubernetes/backend/api/hpa.yaml | kubectl apply -f -
      - name: Kubernetes - switch LB to green deployment
        run: |
          VERSION=${{ env.DEPLOYMENT_VERSION }} envsubst < ops/kubernetes/backend/api/service.yaml | kubectl apply -f -
  cleanup:
    runs-on: self-hosted
    needs: deploy
    steps:
      - name: Remove all related images from github-runner except latest
        run: |
          docker rmi -f $(docker images | grep ${{ env.DOCKER_REPO }} | grep -v latest | awk '{image = sprintf("%s:%s", $1, $2); print image}' | xargs) || true
          docker rmi -f $(docker images | grep ${{ env.DOCKER_REPO_DEV }} | grep -v latest | awk '{image = sprintf("%s:%s", $1, $2); print image}' | xargs) || true
      - name: Remove Dangling Docker Images
        run: docker system prune -f
      - name: Keep 2 deployments available for rollback
        run: |
          kubectl delete deployments \
            $(kubectl get deployments --sort-by=.metadata.creationTimestamp | grep ${{ env.DEPLOYMENT_NAME }} | awk '{ print $1 }' | head -n -2 | xargs) || true
      - name: Remove all dangling images from kubernetes worker nodes
        run: |
          for server in $(echo ${{ env.STAGE_SERVERS }} | xargs); do ssh $server ./scripts/cleanup.sh; done
      - name: Remove completed jobs
        run: kubectl delete jobs $(kubectl get jobs | grep ${{ env.DEPLOYMENT_NAME }} | grep 1/1 | awk '{ print $1 }' | xargs) || true
